Thrift by Example
=======================================

Generating code with Thrift
---------------------------

After creating a .thrift file (See :doc:`thrift-file`) you are now ready to run Thrift in order to generate code in your targeted languages. The usage of thrift command is: ::

	thrift [options] file

For example if you want to generate code for java you should type: ::

	thrift -r --gen filame.thrift

The above command will generate a directory gen-java which will contain all the code generated by Thrift in java. The option -r is to specify that we want to generate recursively code for potential includes on our .thrift file.
After generating code you are now ready to create your client and server code and use the Thrift generated code to do the hard work for you, as we will se below.


``Notice: When trying to run the python server you may encounter the error:`` ::

	ImportError: No module named Thrift

``This can be easily fixed by going to the directory lib/py on the thrift installation directory and run the following command to install the thrift module to your python libraries:`` ::

	sudo python setup.py install


A Simple Example to warm-up
---------------------------


On this example we are going to create a simple multiplication service. 

* Lets create first the .thrift definition of our service. The .thrift file we are going to use is the same we saw in the :doc:`thrift-file` and is as shown below: ::

	namespace java tutorial
	namespace py tutorial

	typedef i32 int // We can use typedef to get pretty names for the types we are using 
	service MultiplicationService
	{
		int multiply(1:int n1, 2:int n2),
	}

* Name this file multiple.thrift and then run the below commands to generate code for java and python ::

	thrift --gen java multiplication.thrift
	thrift --gen py multiplication.thrift

After running the commands Thrift should generate code inside the directories gen-java/tutorial and gen-py/tutorial for Java and Python respectively. 
``Remember to use sudo in case the directories are not created!``
It would be useful to take a look on this code to get a better understanding of what code Thrift generates for you. 
You can find a short explanation of the code here: :doc:`multiplication-service`
	

* Now we are ready to write our own code. Lets first write some Java code for our client and server and then we will also write a Python client to send requests to our server. We will not need to change anything on the server part to do this!

Multiplication Handler
^^^^^^^^^^^^^^^^^^^^^^

Here is the MultiplicationHandler class in which we implement the interface we specified before in our multi.thrift definition and for which Thrift had already generated code.

 .. literalinclude:: code_examples/MultiplicationHandler.java
	:language: java
	
Server
^^^^^^

Here is the MultiplicationServer class in which we

 .. literalinclude:: code_examples/MultiplicationServer.java
	:language: java


Client
^^^^^^

 .. literalinclude:: code_examples/MultiplicationClient.java
	:language: java

A More Complicated Example
############################
Now we are ready to see something a little bit more complicated.


.. toctree::
   :maxdepth: 2
   
   multiplication-service

